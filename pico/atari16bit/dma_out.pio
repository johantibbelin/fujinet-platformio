;------------------------------------------------------
; ACSI DMA out implementation in PIO
; (for use with Fujinet)
;------------------------------------------------------
; Written by Johan Tibbelin (sjfroos)
;
; Waits for data then pulls DRQ low
; ACSI ID to look for
.define ID 3 

;GPIO pins for control signals
.define AIRQ 3
.define CS 0x1b
.define A1 4
.define ACK 21
.define DRQ 4
;
; DMA out in picos point of view
;
.program acsi_dma_out 
;.side_set 1; Program waits for A1 and CS LOW then throws interrupt

;Sideset is used for _IRQ signal
.side_set 1

start:
    nop side 1
    .wrap_target
    pull side 1
    out pins,8 side 1
    nop side 0 ; pull DRQ low
    wait 0 gpio ACK side 0;wait for ACK
    nop [9] side 0
    nop side 1
    wait 1 gpio ACK side 1
    nop [9] side 1
    .wrap
    
%c-sdk {
#include "hardware/gpio.h"
#include "hardware/clocks.h"
//#include "pinmap.h"
#define LED 25
// PIO Freq 50 MHz (20ns per clock cycle)
#define PIO_HZ 50000000

static inline void acsi_dma_out_program_init(PIO pio, uint sm, uint offset, uint pin) {
  // 1. Define a config object
  pio_sm_config config = acsi_dma_out_program_get_default_config(offset);

  // 2. Set and initialize the output pins
  sm_config_set_in_pins(&config, 8);
  sm_config_set_out_pins(&config, 8,8);
  ;sm_config_set_in_shift(&config, true, false, 8);
  
  ;sm_config_set_set_pins(&config, pin, 1);
  sm_config_set_sideset_pins(&config,4);
  
  sm_config_set_in_shift(&config, false, true,8);
  sm_config_set_out_shift(&config, true,false,8);
  
  float div = (float)clock_get_hz(clk_sys) / PIO_HZ;
  printf("DMA out PIO div is: %2.2f\n",div);
  sm_config_set_clkdiv(&config, div);
  
  // 3. Apply the configuration & activate the State Machine
  pio_sm_init(pio, sm, offset, &config);
  pio_gpio_init(pio,4); //DRQ
  pio_gpio_init(pio, 21); //ACK
  pio_gpio_init(pio, 8);
  pio_gpio_init(pio, 9);
  pio_gpio_init(pio, 10);
  pio_gpio_init(pio, 11);
  pio_gpio_init(pio, 12);
  pio_gpio_init(pio, 13);
  pio_gpio_init(pio, 14);
  pio_gpio_init(pio, 15);
  pio_gpio_init(pio, 25);
  pio_sm_set_consecutive_pindirs(pio,sm, 21, 1, false);
  pio_sm_set_consecutive_pindirs(pio,sm,8,8,false);
  pio_sm_set_consecutive_pindirs(pio,sm,4,1,true);
  pio_sm_set_pins_with_mask(pio, sm,0x10,0x10);
  ;pio_set_irq0_source_enabled(pio,pis_interrupt0,true);
  
  pio_sm_set_enabled(pio, sm, true);
}

/*void acsi_dma_out_enable(PIO pio,uint sm) {
  pio_gpio_init(pio,8);
  pio_gpio_init(pio,9);
  pio_gpio_init(pio,10);
  pio_gpio_init(pio,11);
  pio_gpio_init(pio,12);
  pio_gpio_init(pio,13);
  pio_gpio_init(pio,14);
  pio_gpio_init(pio,15);
  pio_sm_set_consecutive_pindirs(pio,sm,8,8,true);
  pio_sm_set_enabled(pio, sm, true);
}
void acsi_dma_out_disable(PIO pio,uint sm) {
  pio_sm_set_consecutive_pindirs(pio,sm,8,8,false);
  pio_sm_set_enabled(pio, sm, false);
  for(int i=8;i<=15;i++) {
    gpio_init(i);
    gpio_set_dir(i,GPIO_IN);
    gpio_disable_pulls(i);
}*/
%}
